<template>
  <div class="container">
    <!-- Confirm Delete Modal -->
    <div class="modal" :class="{ 'is-active': showModal }">
      <div class="modal-background" @click="showModal = false"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</p>
          <button class="delete" @click="showModal = false"></button>
        </header>
        <section class="modal-card-body">
          ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå <strong>{{ fileToDelete?.name }}</strong> ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
        </section>
        <footer class="modal-card-foot">
          <button class="button is-danger" :class="{ 'is-loading': isDeleting }" @click="confirmDelete"
            :disabled="isDeleting">
            ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
          </button>
          <button class="button" @click="showModal = false">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
        </footer>
      </div>
    </div>
    <div class="box">
      <div class="columns is-multiline is-mobile">
        <!-- File Drop Area -->
        <div class="column is-two-fifths-tablet is-full-mobile is-two-fifths-desktop">
          <div class="file-drop-area" @click="openFilePicker" @dragover.prevent @drop="handleDrop">
            <div class="upload-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</p>
            <input type="file" ref="fileInput" @change="handleFileSelect" hidden :disabled="isFileInputDisabled" />
          </div>
        </div>

        <!-- Upload List -->
        <div v-if="!exitFileLoading">
          <LoadingSpinner :isLoading="!exitFileLoading" textTitle="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á" />
        </div>
        <div v-else class="column is-three-fifths-tablet is-full-mobile is-three-fifths-desktop">
          <h3 class="title is-5">üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢</h3>
          <div class="upload-list" v-if="files.length > 0">
            <div v-for="(file, index) in files" :key="file.id_live_doc" class="upload-item mb-2">
              <button class="button has-background-danger" style="border-radius: 5px;"
                @click="showImage(file.path_file, index)">
                <span class="icon p-3">
                  <i class="fas fa-image"></i>
                </span>
              </button>
              <div class="file-info">
                <!-- ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î -->
                <p v-if="file.path_file">{{ file.path_file }} <small></small></p>
                <p v-else>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå</p>
                <!-- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏≤‡∏Å‡∏°‡∏µ -->
                <progress class="progress is-primary" :value="file.progress || 100" max="100"></progress>
                <small v-if="file.progress < 100">{{ file.progress }}% - {{ file.speed }}/sec</small>
                <small v-else class="completed-text">‚úÖ Completed</small>
              </div>
              <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö -->
              <button class="delete" @click="openDeleteModal(file)"></button>
              <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î -->
              <button class="button is-link is-inverted" @click="openDownload(file)">
                <i class="fas fa-download"></i>
              </button>
              <!-- check a file -->
              <!-- <button class="button is-link is-inverted" @click="getFilesNow()">
                <i class="fas fa-download"></i>
              </button> -->
              <!-- getFilesNow -->
            </div>
          </div>
          <div v-else>
            ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
          </div>
        </div>
      </div>
    </div>
    <!-- Lightbox ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ -->
    <div v-if="lightboxVisible" class="lightbox">
      <vue-easy-lightbox :visible="lightboxVisible" :imgs="lightboxImages" :index="lightboxIndex"
        @hide="closeLightbox" />
    </div>

  </div>
</template>

<script>
import LoadingSpinner from '@/components/LoadingSpinner.vue';
import { showSuccessAlert, showErrorAlert } from '@/utils/alertFunc';
import VueEasyLightbox from 'vue-easy-lightbox';
import axios from 'axios';

export default {
  components: {
    LoadingSpinner,
    VueEasyLightbox
  },
  data() {
    return {
      files: [],
      showModal: false,
      fileToDelete: null,
      selectedImage: null, // ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      maxFileCount: 10,
      lightboxImages: [],
      exitFileLoading: false,
      isDeleting: false,
      LAND_ID: '',
      lightboxVisible: false,
      lightboxIndex: 0,
    };
  },
  computed: {
    isFileInputDisabled() {
      return this.files.length >= this.maxFileCount; // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå >= 10 ‡∏à‡∏∞ disable input
    },
  },
  async created() {
    // read query
    try {
      const landId = decodeURIComponent(this.$route.params.id);
      this.LAND_ID = landId;
      await this.getLandFiles(this.LAND_ID);
    } catch (error) {

    } finally {
      this.exitFileLoading = true
    }
  },
  methods: {
    getFilesNow() {
      console.log(this.files)
    },
    async getLandFiles(land_id) {
      try {
        // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
        const response = await axios.get(`http://localhost:3000/upload_file/live_files?land_id=${land_id}`);

        if (response.status === 200) {
          this.files = response.data;  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ `files`
          console.log('‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:', response.data);
        } else {
          console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ");
        }
      } catch (err) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå:", err);
      } finally {

      }
    },
    openFilePicker() {
      this.$refs.fileInput.click();
    },
    handleFileSelect(event) {
      this.addFiles(event.target.files);
    },
    handleDrop(event) {
      this.addFiles(event.dataTransfer.files);
    },
    addFiles(fileList) {
      if (this.files.length >= 10) {
        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡πÑ‡∏ü‡∏•‡πå!");
        return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10
      }
      for (const file of fileList) {
        if (file.size > 65536) {
          alert(`‡πÑ‡∏ü‡∏•‡πå ${file.name} ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 65 KB!`);
          continue;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG)
        if (file.type === "image/jpeg" || file.type === "image/png") {

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô .js
          const validFileNameRegex = /^[a-zA-Z‡∏Å-‡πô\s0-9._-]+$/;
          const fileExtension = file.name.split('.').pop().toLowerCase(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
          if (!validFileNameRegex.test(file.name)) {
            alert(`‡πÑ‡∏ü‡∏•‡πå ${file.name} ‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô.`);
            continue;
          }

          if (fileExtension === "js") {
            alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .js ‡πÑ‡∏î‡πâ!`);
            continue;
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
          const maxLength = 30;
          let fileName = file.name;

          if (fileName.length > maxLength) {
            fileName = fileName.substring(0, maxLength); // ‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
            fileName = `${fileName}.${fileExtension}`; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
          }

          // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
          this.uploadFile(file, fileName);
        } else {
          alert("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!");
        }
      }
    },
    async uploadFile(file) {
      const formData = new FormData();
      formData.append("file", file);  // ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      formData.append("landID", this.LAND_ID);  // ‡πÄ‡∏û‡∏¥‡πà‡∏° landID ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô FormData

      try {
        const response = await axios.post("http://localhost:3000/upload_file/land/live", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        });
        await showSuccessAlert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', response.data.message)
        console.log("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);
        this.exitFileLoading = false
        this.files = []
        await this.getLandFiles(this.LAND_ID);
        this.exitFileLoading = true
      } catch (error) {
        await showErrorAlert('‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error.message)
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:", error);
      }
    },
    downloadLink(file) {
      return `https://example.com/download/${file.id}`;
    },
    openDeleteModal(file) {
      this.fileToDelete = file;
      this.showModal = true;
    },
    confirmDelete() {
      this.isDeleting = true; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î

      setTimeout(() => {
        this.files = this.files.filter(f => f.id !== this.fileToDelete.id);
        this.showModal = false;
        this.fileToDelete = null;
        this.isDeleting = false; // ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
      }, 2000)
    },
    async showImage(filePath, index) {
      this.lightboxIndex = index; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ lightboxIndex
      this.lightboxVisible = true;

      try {
        this.imageLoading = true;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô lightboxImages
        this.lightboxImages = this.files.map(file => `http://localhost:3000/uploads/land_lives/${file.path_file}`); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ lightboxImages ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û
        this.lightboxIndex = index; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î
        console.log('lightboxImages:', this.lightboxImages);
        console.log('lightboxImages:', this.lightboxIndex);

        // ‡πÅ‡∏™‡∏î‡∏á lightbox
        this.lightboxVisible = true;
        this.imageLoading = false;
      } catch (error) {
        console.error("Error fetching image:", error);
      } finally {
        this.imageLoading = false;
      }
    },
    nextImage() {
      if (this.lightboxIndex < this.lightboxImages.length - 1) {
        this.lightboxIndex++;
      }
    },
    prevImage() {
      if (this.lightboxIndex > 0) {
        this.lightboxIndex--;
      }
    },
    closeLightbox() {
      this.lightboxVisible = false;
    },
  }
};
</script>

<style scoped>
.container {
  /* max-width: 900px; */
  margin: auto;
  padding: 20px;
}

.box {
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.file-drop-area {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border: 2px dashed rgba(255, 255, 255, 0.3);
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  text-align: center;
  width: 100%;
  min-height: 350px;
  border-color: gray;
}

.file-drop-area:hover {
  border-color: #3273dc;
  background: rgba(255, 255, 255, 0.2);
}

.upload-icon {
  font-size: 50px;
  color: #3273dc;
  margin-bottom: 10px;
}

.upload-list {
  max-height: 300px;
  overflow-y: auto;
  padding: 10px;
  border-radius: 12px;
}

.upload-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.1);
  transition: transform 0.2s ease-in-out;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
}

.upload-item:hover {
  transform: scale(1.02);
  background: rgba(255, 255, 255, 0.2);
}

.file-info {
  flex-grow: 1;
}

.file-name {
  font-weight: bold;
  color: #3273dc;
  text-decoration: none;
  cursor: pointer;
}

.file-name:hover {
  text-decoration: underline;
}

.progress {
  height: 6px;
  border-radius: 5px;
}

.completed-text {
  color: #28a745;
  font-weight: bold;
}

.upload-list::-webkit-scrollbar {
  width: 8px;
}

.upload-list::-webkit-scrollbar-thumb {
  background: rgba(50, 115, 220, 0.7);
  border-radius: 4px;
}

.upload-list::-webkit-scrollbar-thumb:hover {
  background: rgba(50, 115, 220, 1);
}
</style>